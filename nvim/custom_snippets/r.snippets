global !p
from regex import sub as rsub
from snippet_helpers import *
from r_snippet_helpers import *
#Find function definition line above cursor
#def get_definition(snip):
        ##if (fun := re.match("^[:alnum:]+\s+<-\s+function\(([\w]*\)",  snip.buffer[snip.line]))
        ##^[a-zA-Z0-9._]\+
    #if (line := int(vim.eval("search('\\sfunction(', 'bcW')"))) != 0:
        #return line - 1
    #return None
# https://stackoverflow.com/questions/26385984/recursive-pattern-in-regex
def get_function_name(line):
    fun_line = line if re.match("[^<]+<-", snip.buffer[snip.line]) else line - 1
    fun = re.match("^\s*([^ ]+).*", snip.buffer[fun_line])
    return fun.group(1) if fun else None

def extract_args(start, fun):
    line = snip.buffer[start]
# Handle signatures that flow ove multiple lines: not as annoying as feared!
    if not re.match("\)\s*\{\s*$", line):
        #stop = int(vim.eval("searchpairpos('function(', '', ')\\s*{\\s*$')")[0])
        stop = int(vim.eval("search(')\\s*{\\s*$')"))
        vim.command("echom '" + str(stop) + "'")
        line = " ".join([line] + [snip.buffer[i].lstrip() for i in range(start + 1, stop)])
        #snip.cursor.set(*orig)
    line = re.sub("^[\w.]*\s*(?:<-)?\s*function\s*\(", "", line)
    signature = str(fun) + "(" + re.sub("\s*\{\s*$", "", line)
    line = rsub('[\w.]*\((((?>[^()]+)|(?R))*)\)', "", line)
    line = re.sub("\).*$", "", line)
    #vim.command('echo "' + str(line) + '"')
    args = re.findall("(?:^|,)\s*([\w\.]+)", line)
    return args, signature
endglobal

#pre_expand "snip.buffer[snip.line] = re.sub('rox$', '', snip.buffer[snip.line])"
post_expand "document(snip)"
snippet rox "Roxygen documentation"
`!p snip.rv = ""`
endsnippet

snippet ggpl "Basic ggplot"
ggplot(${1}${2:,} aes(${3:${4:x = ${5},} ${6:y = ${7}}})) +
  geom_${8|point,density,bar,col,histogram|}(${9:}) ${0}
endsnippet

context "snip.buffer[snip.line][0:2] == '#\''"
priority 100
snippet lin "Roxygen link"
\link{\code{$1}}$0
endsnippet

snippet AoC "Advent of Code template" b
#!/usr/bin/r
raw_input <- read${1|.table,.csv,Lines,.delim,|}(${2:"inputs/`!p snip.rv = fn.split(".")[0]`.txt"})
$0

#answer1 <- #TODO

#print(paste("Answer 1:", answer1))

#answer2 <- #TODO

#print(paste("Answer 2:", answer2))
endsnippet
